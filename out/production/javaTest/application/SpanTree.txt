package application;


public class SpanTree {

    public static void PRIM(int[][] graph, int start, int n) {
        int[][] result = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                result[i][j] = 0;
            }
        }
        int[][] mins = new int[n][2];
        //用于保存集合U到V-U之间的最小边和它的值，mins[i][0]值表示到该节点i边的起始节点
        //值为-1表示没有到它的起始点，mins[i][1]值表示到该边的最小值，
        //mins[i][1]=0表示该节点已将在集合U中
        for (int i = 0; i < n; i++) {
            //初始化mins

            if (i == start) {
                mins[i][0] = -1;
                mins[i][1] = 0;
            } else if (graph[start][i] != -1) {
                //说明存在（start，i）的边
                mins[i][0] = start;
                mins[i][1] = graph[start][i];
            } else {
                mins[i][0] = -1;
                mins[i][1] = Integer.MAX_VALUE;
            }
        }
        for (int i = 0; i < n - 1; i++) {
            int minV = -1, minW = Integer.MAX_VALUE;
            for (int j = 0; j < n; j++) {
                //找到mins中最小值，使用O(n^2)时间

                if (mins[j][1] != 0 && minW > mins[j][1]) {
                    minW = mins[j][1];
                    minV = j;
                }
            }
            mins[minV][1] = 0;
            System.out.println("最小生成树的第" + i + "条最小边=<" + (mins[minV][0] + 1) + "," + (minV + 1) + ">");
            result[mins[minV][0]][minV] = 1;
            for (int j = 0; j < n; j++) {
                //更新mins数组
                if (mins[j][1] != 0) {
                    if (graph[minV][j] != -1 && graph[minV][j] < mins[j][1]) {
                        mins[j][0] = minV;
                        mins[j][1] = graph[minV][j];
                    }
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (result[i][j] == 1) {
                    result[j][i] = 1;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(result[i][j]+" ");
            }
            System.out.println();
        }


    }

    public static void main(String[] args) {
        int n = 6;
        int[][] tree = {
                {-1, 6, 1, 5, -1, -1},
                {6, -1, 5, -1, 3, -1},
                {1, 5, -1, 5, 6, 4},
                {5, -1, 5, -1, -1, 2},
                {-1, 3, 6, -1, -1, 6},
                {-1, -1, 4, 2, 6, -1}
        };

        SpanTree.PRIM(tree, n - n, n);

    }
}