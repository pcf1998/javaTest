package application;


public class MiniSpanTree {

    public static void PRIM(int[][] graph, int start, int n) {
        int[][] mins = new int[n][2];
        //用于保存集合U到V-U之间的最小边和它的值，mins[i][0]值表示到该节点i边的起始节点
        //值为-1表示没有到它的起始点，mins[i][1]值表示到该边的最小值，
        //mins[i][1]=0表示该节点已将在集合U中
        for (int i = 0; i < n; i++) {
            //初始化mins

            if (i == start) {
                mins[i][0] = -1;
                mins[i][1] = 0;
            } else if (graph[start][i] != -1) {
                //说明存在（start，i）的边
                mins[i][0] = start;
                mins[i][1] = graph[start][i];
            } else {
                mins[i][0] = -1;
                mins[i][1] = Integer.MAX_VALUE;
            }
//			System.out.println("mins["+i+"][0]="+mins[i][0]+"||mins["+i+"][1]="+mins[i][1]);
        }
        for (int i = 0; i < n - 1; i++) {
            int minV = -1, minW = Integer.MAX_VALUE;
            for (int j = 0; j < n; j++) {
                //找到mins中最小值，使用O(n^2)时间

                if (mins[j][1] != 0 && minW > mins[j][1]) {
                    minW = mins[j][1];
                    minV = j;
                }
            }
//			System.out.println("minV="+minV);
            mins[minV][1] = 0;
            System.out.println("最小生成树的第" + i + "条最小边=<" + (mins[minV][0] + 1) + "," + (minV + 1) + ">，权重=" + minW);
            for (int j = 0; j < n; j++) {
                //更新mins数组
                if (mins[j][1] != 0) {
//					System.out.println("MINV="+minV+"||tree[minV][j]="+tree[minV][j]);
                    if (graph[minV][j] != -1 && graph[minV][j] < mins[j][1]) {
                        mins[j][0] = minV;
                        mins[j][1] = graph[minV][j];
                    }
                }
            }
        }
    }

    /*public static void KRUSKAL(int[] V, Edge[] E) {
        Arrays.sort(E);
        //将边按照权重w升序排序
        ArrayList<HashSet> sets = new ArrayList<>();
        for (int i = 0; i < V.length; i++) {
            HashSet set = new HashSet();
            set.add(V[i]);
            sets.add(set);
        }

        System.out.println("++++++++++++++++++++++size=" + sets.size());
        for (int i = 0; i < E.length; i++) {
            int start = E[i].i, end = E[i].j;
            int counti = -1, countj = -2;
            for (int j = 0; j < sets.size(); j++) {
                HashSet set = sets.get(j);
                if (set.contains(start)) {
                    counti = j;
                }

                if (set.contains(end)) {
                    countj = j;
                }
            }
            if (counti < 0 || countj < 0) System.err.println("没有在子树中找到节点，错误");

            if (counti != countj) {
                System.out.println("输出start=" + start + "||end=" + end + "||w=" + E[i].w);
                HashSet setj = sets.get(countj);
                sets.remove(countj);
                HashSet seti = sets.get(counti);
                sets.remove(counti);
                seti.addAll(setj);
                sets.add(seti);
            }
            else {
                System.out.println("他们在一棵子树中，不能输出start=" + start + "||end=" + end + "||w=" + E[i].w);

            }
        }


    }*/

    public static void main(String[] args) {
        int n=6;
        int[][] tree = {
                {-1, 6, 1, 5, -1, -1},
                {6, -1, 5, -1, 3, -1},
                {1, 5, -1, 5, 6, 4},
                {5, -1, 5, -1, -1, 2},
                {-1, 3, 6, -1, -1, 6},
                {-1, -1, 4, 2, 6, -1}
        };

        MiniSpanTree.PRIM(tree, n-n, n);
        /*System.out.println("+++++++++++++++++++++++++++++++++");

        int[] V = new int[n];
        for(int i=0;i<n;i++){
            V[i]=i+1;
        }
        int edgeNum=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(tree[i][j]!=-1){
                    edgeNum++;
                }
            }
        }

        Edge[] E = new Edge[edgeNum];
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(tree[i][j]!=-1){
                    E[count]=new Edge(i+1,j+1,tree[i][j]);
                    count++;
                }
            }
        }
        MiniSpanTree.KRUSKAL(V, E);*/
    }
}


0 1 1 1 0 0

1 0 1 0 1 0

1 1 0 1 1 1

1 0 1 0 0 1

0 1 1 0 0 1

0 0 1 1 1 0


0 10 9 8 7

10 0 6 5 4

9 6 0 3 2

8 5 3 0 1

7 4 2 1 0